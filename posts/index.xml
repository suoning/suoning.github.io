<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on B族维生素</title>
    <link>https://suoning.github.io/posts/</link>
    <description>Recent content in Posts on B族维生素</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 02 Feb 2021 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://suoning.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nsq</title>
      <link>https://suoning.github.io/posts/nsq/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0800</pubDate>
      
      <guid>https://suoning.github.io/posts/nsq/</guid>
      <description>简介 NSQ是一个基于Go语言的分布式实时消息平台
具有分布式、去中心化的拓扑结构，支持无限水平扩展。
无单点故障、故障容错、高可用性以及能够保证消息的可靠传递的特征。
容易配置和部署, 支持众多的消息协议。
支持多种客户端，协议简单。
组件 nsqd 一个负责接收、排队、转发消息到客户端的守护进程
channel 消费者组（Comsumer Group）的概念。消费者组是Kafka里提到的，在Nsq，对应的术语是channel
当nsq收到消息时，会给每个channel复制一份消息，然后channel再给对应的消费者组，推送一条消息，默认轮询
 图中，nsq上有一个叫”clicks“的topic，”clicks“下面有三条channel，也就是三个消费者组，其中channel名称为”metrics“的，有三个实例。消息A来到nsq后，被复制到三条channel，接着，在metrics上的那个A，被推送到了第二个实例上。接着，又来了一个叫B的消息，这一次，B被推送给了第一个实例进行处理。
nsqlookupd 管理拓扑信息, 用于收集nsqd上报的topic和channel,并提供最终一致性的发现服务的守护进程
nsqlookup提供了类似于etcd、zookeeper一样的kv存储服务，里面记录了topic下面都有哪些nsq。
nsqlookup提供了一个/lookup接口，比如你想知道哪些nsq上面，有topic为test的消息，那么只需要调一下：
1  curl &amp;#39;http://127.0.0.1:8606/lookup?topic=test&amp;#39;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { &amp;#34;channels&amp;#34;:[ &amp;#34;nsq_***.com&amp;#34; ], &amp;#34;producers&amp;#34;:[ { &amp;#34;remote_address&amp;#34;:&amp;#34;127.0.0.1:42362&amp;#34;, &amp;#34;hostname&amp;#34;:&amp;#34;***.com&amp;#34;, &amp;#34;broadcast_address&amp;#34;:&amp;#34;***.com&amp;#34;, &amp;#34;tcp_port&amp;#34;:8602, &amp;#34;http_port&amp;#34;:8603, &amp;#34;version&amp;#34;:&amp;#34;1.1.0&amp;#34; } ] }   接着消费者只需要遍历返回的json串里的producers列表，把broadcast_address和tcp_port或者http_port拼起来，就可以拿到要建立连接的url地址。
消费者会和这些nsq，逐个建立连接。nsq收到对应topic的消息后，就会给和他们建立连接的消费者，推送消息。
nsqadmin 一套Web用户界面，可实时查看集群的统计数据和执行相应的管理任务
消息 消息至少被投递一次 消息投递策略，是消息中间件的特有属性，不同的消息中间件，对投递策略的支持也不同。比如Kafka，就支持最多一次（At most once）、至少一次(At lease once)、准确一次(Excatly once)三种策略，而nsq，则只支持最常见的一种，也就是至少一次。</description>
    </item>
    
    <item>
      <title>boot2docker</title>
      <link>https://suoning.github.io/posts/boot2docker/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0800</pubDate>
      
      <guid>https://suoning.github.io/posts/boot2docker/</guid>
      <description>为什么使用 boot2docker 在 Ubuntu 等环境，我们可以一键安装Docker(服务端、客户端)，但是在 Mac、Windows 环境却无法直接安装 Docker 服务端。这种情况下，我们有3种选择：
 在虚拟机安装 CentOS 或者 Ubuntu：比较费时。 使用 docker-for-mac 或者 docker-for-windows (仅Windows10专业版支持)客户端，这种体积会比较大，一般300M左右。可配置性不高，出了问题不好排查。 使用 boot2docker，配合 docker-machine 客户端，轻松部署Docker环境。需要提前安装VirtualBox(约90M)。  安装 下载并安装 VirtualBox https://www.virtualbox.org/wiki/Downloads
https://www.virtualbox.org/wiki/Download_Old_Builds_6_0
https://download.virtualbox.org/virtualbox/6.0.10/VirtualBox-6.0.10-132072-OSX.dmg
下载 boot2docker.iso https://github.com/boot2docker/boot2docker/releases
https://github.com/boot2docker/boot2docker/releases?after=v19.03.3-beta2
https://github.com/boot2docker/boot2docker/releases/download/v19.03.1/boot2docker.iso
下载并安装 docker-machine 1  brew install docker-machine   1 2  curl -L https://github.com/docker/machine/releases/download/v0.14.0/docker-machine-`uname -s`-`uname -m` &amp;gt;/usr/local/bin/docker-machine &amp;amp;&amp;amp; \  chmod +x /usr/local/bin/docker-machine   1 2 3  if [[ ! -d &amp;#34;$HOME/bin&amp;#34; ]]; then mkdir -p &amp;#34;$HOME/bin&amp;#34;; fi &amp;amp;&amp;amp; \ curl -L https://github.</description>
    </item>
    
    <item>
      <title>Docker使用</title>
      <link>https://suoning.github.io/posts/docker-use/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0800</pubDate>
      
      <guid>https://suoning.github.io/posts/docker-use/</guid>
      <description>安装 Homebrew 1  $ brew install --cask --appdir=/Applications docker   检查版本
1 2  ~ docker -v Docker version 20.10.2, build 2291f61   使用 拉取镜像 1 2 3  ~ docker pull centos ~ docker pull centos:latest ~ docker pull centos:6.8   1  ~ docker search centos    NAME: 镜像仓库源的名称 DESCRIPTION: 镜像的描述 OFFICIAL: 是否 docker 官方发布 stars: 类似 Github 里面的 star，表示点赞、喜欢的意思。 AUTOMATED: 自动构建。  查看镜像 1  ~ docker images    **REPOSITORY：**表示镜像的仓库源 **TAG：**镜像的标签 **IMAGE ID：**镜像ID **CREATED：**镜像创建时间 **SIZE：**镜像大小  删除镜像 1  ~ docker rmi 69085eea740e   创建镜像 1  ~ docker commit -m=&amp;#34;has update&amp;#34; ae6fb5dca553 my:1.</description>
    </item>
    
    <item>
      <title>散列函数中求模运算为什么要使用素数</title>
      <link>https://suoning.github.io/posts/hash-mod-primenumber/</link>
      <pubDate>Tue, 12 Jan 2021 18:38:09 +0800</pubDate>
      
      <guid>https://suoning.github.io/posts/hash-mod-primenumber/</guid>
      <description>一.散列函数 散列函数即是将元素映射到对应槽位置的方法。
一个好的散列函数应该是尽可能的将元素均匀的散列到 m 个槽位中的一个。
二.除法散列法 散列函数的实现有很多种，其中一种常见的散列函数即 除法散列法，h(k) = k mod m，通过取 k 除以 m 的余数，将关键字 k 映射到 m 个槽上。由于只需做一次除法操作，所以除法散列法是非常快的。
当我们使用除法散列法时，m 的选择很重要。《算法导论》一书中，建议我们使用一个不太接近 2 的整数幂的素数，作为 m 的选择。
那么在求模运算中为什么建议要使用素数呢？这是因为使用素数可以让元素取模后的值，更不容易发生冲撞。至于是为什么，我们在下面探讨。
三.对素数取模的好处 前面说道，对素数取模，结果更不容易发生冲撞，即结果可以更均匀的散列到不同的槽位中。那么原理是怎么样的呢？
合数和素数：合数即有两个以上的因数，素数（质数）即只有两个因数，分别为 1 和其本身。
如果对一个合数取模，那么对其某个因数取模，结果可能仍然一致。例如 10 对 8 取模，结果为 2，对 4 取模，结果也为 2。而我们对一个素数取模，由于素数只有 1 和其本身两个素数，即不可能出现上述情形。
四.实例分析 1. 数列A：1，3，5，7，9，11，13，15 假设选取 8 取模，结果为：
   余数 0 1 2 3 4 5 6 7     数值  1  3  5  7   数值  9  11  13  15    每个数间隔 2，2 是 8 的一个因数，容易发生冲突，不均匀分布。</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://suoning.github.io/posts/my-first-post/</link>
      <pubDate>Sat, 09 Jan 2021 13:08:43 +0800</pubDate>
      
      <guid>https://suoning.github.io/posts/my-first-post/</guid>
      <description>hugo --theme=maupassant --baseUrl=&amp;quot;https://suoning.github.io/&amp;quot; cd public git init git remote add origin https://github.com/suoning/suoning.github.io.git git add -A git commit -m &amp;quot;first commit&amp;quot; git push --set-upstream origin master 一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 JavaScript 在控制台输出消息的语法是 console.log(message)。
class Program { static void Main(string[] args) { Console.WriteLine(&amp;quot;Hello World!&amp;quot;); } }  https://suoning.cnblogs.com/
百度一下，你就知道 
 …or create a new repository on the command line
echo &amp;quot;# suoning.github.io&amp;quot; &amp;gt;&amp;gt; README.md git init git add README.md git commit -m &amp;quot;first commit&amp;quot; git branch -M main git remote add origin https://github.</description>
    </item>
    
  </channel>
</rss>